basePath: /api/v1/
definitions:
  model.JSONResponseError:
    properties:
      code:
        type: string
      error:
        type: string
    required:
    - code
    type: object
  model.JSONResponseSuccess:
    properties:
      code:
        type: string
      data:
        type: string
    required:
    - code
    type: object
host: localhost:8080
info:
  contact: {}
  title: Good Food Gateway documentation
  version: 1.0.0
paths:
  /countries:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all countries
      tags:
      - Country
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a new country
      tags:
      - Country
  /countries/{id}:
    delete:
      parameters:
      - description: ID du pays
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete a country
      tags:
      - Country
    put:
      parameters:
      - description: ID du pays
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a country
      tags:
      - Country
  /login:
    post:
      parameters:
      - description: Email du compte
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Mot de passe
        in: body
        name: password
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Log in an user into application
      tags:
      - Account
  /logout:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Log out an user
      tags:
      - Account
  /orderStatus:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all order status
      tags:
      - OrderStatus
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a new order status
      tags:
      - OrderStatus
  /orderStatus/{id}:
    delete:
      parameters:
      - description: ID du status d'une commande
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete an order status
      tags:
      - OrderStatus
    put:
      parameters:
      - description: ID du status d'une commande
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a order status
      tags:
      - OrderStatus
  /recipeTypes:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all recipe type
      tags:
      - RecipeType
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a new recipe type
      tags:
      - RecipeType
  /recipeTypes/{id}:
    delete:
      parameters:
      - description: ID du type de recette
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete a recipe type
      tags:
      - RecipeType
    put:
      parameters:
      - description: ID du type de recette
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a recipe type
      tags:
      - RecipeType
  /recipes:
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a new recipe
      tags:
      - Recipe
  /recipes/{id}:
    delete:
      parameters:
      - description: ID de la recette
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete a recipe
      tags:
      - Recipe
    get:
      parameters:
      - description: ID de la recette
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get recipe by id
      tags:
      - Recipe
    put:
      parameters:
      - description: ID de la recette
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a recipe
      tags:
      - Recipe
  /recipes/shops/{id}:
    get:
      parameters:
      - description: ID du shop
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all recipes for shop
      tags:
      - Recipe
    post:
      parameters:
      - description: ID du restaurant
        in: path
        name: id
        required: true
        type: string
      - description: ID de la recette
        in: body
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Insert a new recipe to a shop
      tags:
      - Recipe
  /services:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all service
      tags:
      - Service
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a new service
      tags:
      - Service
  /services/{id}:
    delete:
      parameters:
      - description: ID du service
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete a service
      tags:
      - Service
    put:
      parameters:
      - description: ID du service
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a service
      tags:
      - Service
  /shopType:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all shop type
      tags:
      - ShopType
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a new shop type
      tags:
      - ShopType
  /shopType/{id}:
    delete:
      parameters:
      - description: ID du type de restaurant
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete an shop type
      tags:
      - ShopType
    put:
      parameters:
      - description: ID du type de restaurant
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a shop type
      tags:
      - ShopType
  /signup:
    post:
      parameters:
      - description: Email du compte
        in: body
        name: email
        required: true
        schema:
          type: string
      - description: Mot de passe
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: ID du role
        in: body
        name: id_role
        required: true
        schema:
          type: string
      - description: ID du pays
        in: body
        name: id_country
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Register a new user
      tags:
      - Account
  /test:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Test endpoint
      tags:
      - Test
  /userRole/{id}:
    delete:
      parameters:
      - description: ID du role
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Delete a user role
      tags:
      - UserRole
    put:
      parameters:
      - description: ID du role
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update a user role
      tags:
      - UserRole
  /userRoles:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get all user role
      tags:
      - UserRole
    post:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Create a user role
      tags:
      - UserRole
  /users:
    get:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Get the current user data
      tags:
      - User
    put:
      parameters:
      - description: Mot de passe
        in: body
        name: password
        required: true
        schema:
          type: string
      - description: Compte actif
        in: body
        name: active
        required: true
        schema:
          type: boolean
      - description: ID du role
        in: body
        name: id_role
        required: true
        schema:
          type: string
      - description: ID du pays
        in: body
        name: id_country
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.JSONResponseSuccess'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.JSONResponseError'
      summary: Update the current user
      tags:
      - User
swagger: "2.0"
